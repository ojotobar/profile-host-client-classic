name: Build And Push Portfolio (Classic) Docker Image To Docker Hub

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  check_merge_condition:
    runs-on: ubuntu-latest
    steps:
      - name: Fail if not merged from development
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"

          if [[ "${{ github.event.pull_request.merged }}" != "true" || "${{ github.event.pull_request.head.ref }}" != "development" ]]; then
            echo "PR must be merged from 'development' into 'master'"
            exit 1
          fi
        shell: bash

  if_merged:
    needs: check_merge_condition
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get latest version tag from Docker Hub
        id: get_version
        env:
          DOCKERHUB_USERNAME: ${{ secrets.PROD_HUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.PROD_HUB_SECRET }}
        run: |
          IMAGE_NAME="portfolio"
          REPO="$DOCKERHUB_USERNAME/$IMAGE_NAME"

          TAGS=$(curl -s -u "$DOCKERHUB_USERNAME:$DOCKERHUB_PASSWORD" \
            "https://hub.docker.com/v2/repositories/$REPO/tags/?page_size=10000" \
            | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+$' || echo "")

          MAX_VERSION=$(echo "$TAGS" | sed 's/v//' | sort -V | tail -n 1)

          if [[ -z "$MAX_VERSION" ]]; then
            NEXT_VERSION="1.0"
          else
            MAJOR=$(echo "$MAX_VERSION" | cut -d. -f1)
            MINOR=$(echo "$MAX_VERSION" | cut -d. -f2)

            if [[ "$MINOR" -ge 9 ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
            else
              MINOR=$((MINOR + 1))
            fi

            NEXT_VERSION="$MAJOR.$MINOR"
          fi

          echo "VERSION=v$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine isPremium boolean
        id: premium_flag
        run: |
          raw="${{ secrets.IS_PREMIUM }}"
          if [[ "$raw" == "true" || "$raw" == "1" ]]; then
            echo "value=true" >> $GITHUB_OUTPUT
          else
            echo "value=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Write build-variables.json to Angular assets
        run: |
          echo "{ \"version\": \"${{ steps.get_version.outputs.VERSION }}\", \"apiUrl\": \"${{ secrets.API_URL }}\", \"tag\": \"${{ secrets.TAG }}\", \"isPremium\": ${{ steps.premium_flag.outputs.value }} }" > src/assets/env/build-variables.json

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.PROD_HUB_USERNAME }}
          password: ${{ secrets.PROD_HUB_SECRET }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.PROD_HUB_USERNAME }}/portfolio:${{ secrets.TAG }}
            ${{ secrets.PROD_HUB_USERNAME }}/portfolio:${{ steps.get_version.outputs.VERSION }}

      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"ðŸš€ *Portfolio (Classic) Image Deployed!*\nVersion: \`${{ steps.get_version.outputs.VERSION }}\`\nTag: \`${{ secrets.TAG }}\`\nEnvironment: *Production*\" 
          }" $SLACK_WEBHOOK_URL

      - name: Get Auth Token from GraphQL Login
        id: graphql_auth
        run: |
          LOGIN_JSON=$(jq -n \
            --arg email "${{ secrets.GRAPHQL_LOGIN_EMAIL }}" \
            --arg password "${{ secrets.GRAPHQL_LOGIN_PASSWORD }}" \
            '{
              query: "mutation Login($input: LoginUserInput!) { loginUser(input: $input) { loginResult { accessToken successful } } }",
              variables: {
                input: {
                  input: {
                    email: $email,
                    password: $password
                  }
                }
              }
            }')

          RESPONSE=$(curl -s -X POST ${{ secrets.API_URL }} \
            -H "Content-Type: application/json" \
            -d "$LOGIN_JSON")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.data.loginUser.loginResult.accessToken')

          if [ "$ACCESS_TOKEN" = "null" ]; then
            echo "Login failed. No token received."
            exit 1
          fi

          echo "::add-mask::$ACCESS_TOKEN"
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Notify Users via GraphQL Mutation
        run: |
          curl -X POST ${{ secrets.API_URL }} \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ steps.graphql_auth.outputs.token }}" \
            -H "GraphQL-Preflight: 1" \
            -d "{
              \"query\": \"mutation NewDeployAlert(\$input: SendNewVersionNotificationInput!) { sendNewVersionNotification(input: \$input) { payload { message success } } }\",
              \"variables\": {
                \"input\": {
                  \"input\": {
                    \"version\": \"${{ steps.get_version.outputs.VERSION }}\",
                    \"tag\": \"${{ secrets.TAG }}\",
                    \"env\": \"production\",
                    \"isPremium\": ${{ steps.premium_flag.outputs.value }}
                  }
                }
              }
            }"